import{_ as e,o as r,c as t,e as i,b as a,d as n}from"./app.50de81e9.js";const A=JSON.parse('{"title":"Struktur Teks Algoritma","description":"","frontmatter":{"title":"Struktur Teks Algoritma"},"headers":[{"level":2,"title":"1. Bagian Judul (Header)","slug":"_1-bagian-judul-header","link":"#_1-bagian-judul-header","children":[]},{"level":2,"title":"2. Bagian Deklarasi (Declaration)","slug":"_2-bagian-deklarasi-declaration","link":"#_2-bagian-deklarasi-declaration","children":[]},{"level":2,"title":"3. Bagian Definisi (Definition)","slug":"_3-bagian-definisi-definition","link":"#_3-bagian-definisi-definition","children":[]}],"relativePath":"matkul/1/sistem-operasi/1.5-struktur-teks-algoritma.md"}'),s={name:"matkul/1/sistem-operasi/1.5-struktur-teks-algoritma.md"},l=i("",12),d=a("ol",null,[a("li",null,[n("Tipe Tipe sebuah objek menentukan himpunan nilai yang dapat dimilikinya dan operasi yang dapat dilakukan pada objek tersebut. Nilai-nilai yang dicakup oleh objek tersebut dinyatakan dengan ranah (domain). Terdapat dua jenis tipe data, yaitu : a. Tipe dasar Merupakan tipe data yang dapat langsung digunakan. b. Tipe bentukan Merupakan tipe data yang dibentuk dari tipe data dasar atau tipe bentukan lain yang telah didefinisikan sebelumnya. 1.1 Tipe Dasar Dalam dunia pemrograman, yang termasuk sebagai tipe dasar adalah bilangan lojik (bilangan logika), bilangan bulat, bilangan riil, karakter dan string. Bilangan Lojik Nama tipe : boolean (diambil dari nama matematikawan Inggris, George Boole) Ranah nilai : true (benar) atau false (salah) Konstanta : true dan false Operasi : operasi logika (operasi boolean) Operator : and, or, xor, not A B A and B A or B A xor B not A not B True True True True False False False True False False True True False True False True False True True True False False False False False False True True Bilangan Bulat Nama tipe : integer Ranah nilai : byte (0..255) shortint (-128..127) word (0..65535) integer (- 2768..32767) 4 longint (-2147483648.. 2147483647) Konstanta : ditulis tanpa mengandung titik desimal Operasi : operasi aritmatika dan operasi perbandingan Operator : operasi aritmatika \uF0AE + (tambah), - (kurang), * (kali), div (bagi), mod (sisa hasil bagi) operasi perbandingan \uF0AE <, \uF0A3, >, \uF0B3, =, \uF0B9 Bilangan Riil Nama tipe : real (floating-point) Ranah nilai : minus tak hingga sampai plus tak hingga Konstanta : ditulis dengan tanda titik desimal Operasi : operasi aritmatika dan operasi perbandingan Operator : operasi aritmatika \uF0AE + (tambah), - (kurang), * (kali), / (bagi) operasi perbandingan \uF0AE <, \uF0A3, >, \uF0B3, \uF0B9 Karakter Nama tipe : char Ranah nilai : semua huruf abjad, semua tanda baca, angka (0, .., 9), karakter khusus seperti \u2018&\u2019, \u2018%\u2019, \u2018#\u2019, \u2018@\u2019, \u2018 \u2019 dan sebagainya Konstanta : diapit oleh tanda petik tunggal Operasi : operasi perbandingan Operator : operasi perbandingan \uF0AE <, \uF0A3, >, \uF0B3, =, \uF0B9 String (Untaian karakter dengan panjang tertentu) Nama tipe : string Ranah nilai : deretan karakter yang telah didefinisikan pada ranah karakter Konstanta : diapit oleh tanda petik tunggal Operasi : operasi penyambungan (concatenation) dan operasi perbandingan Operator : operasi concatenation \uF0AE + operasi perbandingan \uF0AE <, \uF0A3, >, \uF0B3, =, \uF0B9 1.2 Tipe Bentukan Merupakan tipe data yang didefinisikan sendiri oleh pemrogram (user-defined data type). Yang termasuk tipe bentukan adalah tipe dasar yang diberi nama tipe baru dan tipe terstruktur/record/ rekaman. 5 Tipe Dasar Yang Diberi Nama Tipe Baru Pemberian nama baru untuk sebuah tipe dasar didahului dengan kata type. Ranah nilai, konstanta, dan lain sebagainya tetap tidak berubah, sesuai dengan tipe dasar aslinya. Sebagai contoh : type BilanganBulat : integer Tipe Terstruktur Tipe yang berbentuk rekaman (record). Rekaman disusun oleh satu atau lebih field. Setiap field menyimpan data dari tipe dasar tertentu atau dari tipe bentukan lain yang telah didefinisikan sebelumnya. Contoh mendefinisikan tipe terstruktur : a. Titik dalam bidang kartesian dinyatakan sebagai (x, y). Maka, titik dapat dinyatakan dengan sebagai tipe bentukan dengan x dan y sebagai fieldnya. type Titik : record <x : real, y : real> P : Titik P adalah peubah bertipe Titik, sehingga untuk mengacu tiap field pada P adalah : P.x atau P.y b. Pendefinisian tanggal dalam kalendar Masehi menyebabkan hari akan dinyatakan dalam tanggal (dd), bulan (mm), dan tahun (yy). Tipe bentukan untuk tanggal adalah : type Tanggal : record < dd : integer, mm : integer, yy : integer> D : Tanggal D adalah peubah bertipe Tanggal. Untuk mengacu tiap field pada D adalah : D.dd atau "),a("a",{href:"http://D.mm",target:"_blank",rel:"noreferrer"},"D.mm"),n(" atau D.yy")]),a("li",null,[n("Nama Nama digunakan sebagai pengidentifikasi \u201Csesuatu\u201C dan pemrogram mengacu \u201Csesuatu\u201D itu melalui namanya. Adapun aturan penulisan nama dalam algoritma : a. Nama harus dimulai dengan huruf alfabet. b. Huruf besar atau huruf kecil tidak dibedakan. c. Karakter penyusun nama hanya boleh huruf, angka, dan karakter \u2018"),a("em",null,"\u2019. d. Tidak boleh mengandung operator aritmatika, operator relasional, karakter khusus, dan tanda baca. e. Karakter \u2013karakter di dalam nama tidak boleh dipisah menggunakan spasi. Spasi dapat diganti dengan karakter \u2018"),n("\u2019. f. Panjang nama tidak dibatasi. Di dalam algoritma, objek yang diberi nama dapat berupa : a. Peubah (variable) b. Konstanta (constant) 6 c. Tipe bentukan d. Nama fungsi atau procedure")]),a("li",null,"Nilai Nilai dapat berupa isi yang disimpan oleh nama peubah atau nama konstanta, nilai dari hasil penghitungan, atau nilai yang dikirim oleh fungsi. Peubah menyimpan nilai dari tipe tertentu. Nilai dapat dimasukkan ke dalam nama peubah melalui beberapa cara, yakni : a. Pengisian secara langsung (assignment) Yaitu pengisian nilai ke dalam nama peubah langsung di dalam algoritma. Syaratnya tipe nilai yang dimasukkan harus sama dengan tipe peubahnya. Notasi pengisian secara langsung adalah \uF0AC. Sebagai contoh : S \uF0AC 10 {nilai berupa konstanta} A \uF0AC B {nilai dari peubah lain} Nilai_akhir \uF0AC (uts +uas ) / 2 {nilai dari ekspresi} b. Pembacaan Nilai peubah dapat diisi dari piranti masukan, misalnya dari keyboard. Dalam algoritma pernyataan pembacaan menggunakan notasi read. Sebagai contoh : read(nama_mahasiswa) read(no_telepon)"),a("li",null,"Ekspresi Cara penghitungan (komputasi) dalam algoritma yang menghasilkan sebuah nilai disebut dengan ekspresi. Ekspresi terdiri dari operand dan operator. Operand adalah elemen (nilai) yang dioperasikan dengan operator tertentu. Terdapat 3 jenis ekspresi, yaitu : a. Ekspresi numerik, ekspresi yang baik operand, operator dan hasilnya bertipe numerik. Contoh : 3 + 2, 12 div 4, dan sebagainya b. Ekspresi relasional (ekspresi boolean), ekspresi yang operatornya terdiri dari operator perbandingan dan logika. Hasil ekspresi ini merupakan bilangan logika (true atau false). Contoh : not true, x < 10, dan sebagainya c. Ekspresi string, ekspresi yang operatornya adalah \u201C+\u201D (operator penyambungan). Contoh : 7 \u2018Teknik \u2019 + \u2018Informatika\u2019"),a("li",null,"Menuliskan Nilai Ke Piranti Keluaran Untuk menuliskan nilai ke piranti keluaran digunakan pernyataan write. Sebagai contoh : write(nama_mahasiswa) write(no_telepon) RUNTUNAN Algoritma merupakan runtunan (sequence) satu atau lebih instruksi, yang berarti bahwa :"),a("li",null,"Tiap instruksi dikerjakan satu per satu"),a("li",null,"Tiap instruksi dilaksanakan tepat sekali, tidak ada instruksi yang diulang"),a("li",null,"Urutan instruksi yang dilaksanakan pemroses sama dengan urutan instruksi sebagaimana yang tertulis di dalam teks algoritmanya"),a("li",{detik:""},[n("Akhir dari instruksi terakhir merupakan akhir algoritma Urutan instruksi di dalam algoritma adalah penting. Urutan instruksi menunjukkan urutan logik penyelesaian masalah. Bergantung pada masalahnya, urutan instruksi yang berbeda mungkin tidak ada pengaruhnya tehadap solusi persoalan, tetapi mungkin juga menghasilkan keluaran yang berbeda pula. Contoh kasus 1 : urutan instruksi tidak berpengaruh terhadap solusi persoalan. Dibaca dua buah nilai integer dari piranti masukan, A dan B. hitung jumlah keduanya dan hasil kali keduanya, lalu cetak jumlah dan hasil kali itu ke piranti keluaran. Algoritma RUNTUNAN_1 { contoh algorima yang menghasilkan keluaran yang sam jika urutan instruksi diubah. } DEKLARASI A, B, C, D : integer DESKRIPSI read(A,B) C\u2190A+B D\u2190A"),a("em",null,"B Write(C,D) 8 Hasil algoritma di atas sama saja jika urutan C\u2190A+B dan D\u2190A"),n("B diubah sebagai berikut : Contoh kasus 2 : urutan instruksi berpengaruh terhadap solusi persoalan. Diketahui dua buah nilai integer, masing-masing disimpan di dalam dua peubah, A dan B. bagaimana cara mempertukarkan nilai A dan B ? Misalnya, sebelum pertukaran nilai A=8, nilai B=5, maka setelah pertukaran, nilai A=5 dan B=8. Proses pertukaran nilai akan salah jika anda tidak benar menuliskan urutan instruksi, misalnya runtunan { proses pertukaran } temp\u2190A { simpan nilai A di penampungan sementara, temp } A\u2190B { sekarang A dapat diisi dengan nilai B } B\u2190temp { isi B dengan nilai A semula yang tadi disimpan di temp } Diubah urutannya sebagai berikut : Algoritma RUNTUNAN_1 { contoh algorima yang menghasilkan keluaran yang sam jika urutan instruksi diubah. } DEKLARASI A, B, C, D : integer DESKRIPSI read(A,B) D\u2190A"),a("em",null,"B C\u2190A+B Write(C,D) Algoritma TUKAR_1 { mempertukarkan nilai A dan B. Nilai A dan B dibaca dari piranti masukan. Nilai A dan B dicetak ke piranti keluaran, baik sebelum pertukaran maupun sesudah pertukaran. ALGORITMA YANG BENAR ! } DEKLARASI A : integer { nilai pertama } B : integer { nilai kedua } Temp : integer { peubah bantu } DESKRIPSI { baca nilai A dan B } Read(A,B) { cetak nilai A dan B sebelum pertukaran } Write(A,B) { proses pertukaran } temp\u2190A { simpan nilai A di penampungan sementara, temp } A\u2190B { sekarang A dapat diisi dengan nilai B } B\u2190temp { isi B dengan nilai A semula yang tadi disimpan di temp } { cetak nilai A dan B setelah pertukaran } Write(A,B) 9 { proses pertukaran } temp\u2190A { simpan nilai A di penampungan sementara, temp } B\u2190temp { isi B dengan nilai A semula yang tadi disimpan di temp } A\u2190B { sekarang A dapat diisi dengan nilai B } maka runtunan yang terakhir ini sama saja dengan runtunan : B\u2190A A\u2190B Dibaca waktu tempuh seorang pelari marathon dalam jam-menit-detik (hh:mm:ss). Diminta mengkonversi waktu tempuh tersebut ke dalam detik. Tuliskan algoritmanya. Ingatlah 1 menit = 60 detik 1 jam = 3600 detik Misalnya waktu tempuh seorang pelari marathon adalah 1 jam, 5 menit, 40 detik. Dalam detik, waktu tempuh seluruhnya adalah ( 1 x 3600 ) + ( 5 x 60 ) + 40 = 3940 detik. Jika anda mentranslasikan algoritma KONVERSI_JAM_KE_DETIK ke dalam bahasa pascal, anda harus memperhatikan tipe bilangan bulat yang digunakan. Karena ranah nilai tipe integer terbatas, maka ada kemungkinan hasil pengubahan jam-menit-detik ke total detik bernilai negatif, sebab nilai (J.hh"),n("3600) + ("),a("a",{href:"http://J.mm",target:"_blank",rel:"noreferrer"},"J.mm"),n("*60) + J.ss berada di luar rentang tipe integer. Tipe longint yang mempunyai ranah yang lebih besar dapat dipakai untuk masalah ini. Penyelesaian Algoritma KONVERSI_JAM_KE_DETIK { dibaca jam-menit-detik (hh:mm:ss). Nilai jam-menit-detik dikonversi ke dalam detik, lalu ditampilkan ke piranti keluaran } DEKLARASI Type jam : record <hh : integer {0..23}, {jam} mm : integer {0..59}, {menit} ss : integer {0..59},")])],-1),u=i("",3),p=[l,d,u];function k(m,g,o,h,b,c){return r(),t("div",null,p)}const _=e(s,[["render",k]]);export{A as __pageData,_ as default};
